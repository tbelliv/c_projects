1. Show the output produced by each of the following program fragments. Assume that i. j. and k are int variables.

(a) i = 5; j = 3;

printf("%d %d", i / j, i % j);

(b) i = 2; j = 3;

printf("%d", (i + 10) % j) ;

(c) i = 7; j = 8; k = 9 ;

printf("%d", (i + 10) % k / j) ;

(d) i = 1; j = 2; k = 3;

printf( "%d", (i + 5) % (j + 2) / k) ;

1.

a. 1 2

b. 0

c. 1

d. 0

2.  If i and j are positive integers, does (- i) / j always have the same value as - (i/j ) ? Jus¬ tify your answer.

2.

#include<stdio.h>

int main(void){

    int i;
    int j;

    (- i)/j;
    -(i/j);
    
    return 0;
}

Both (-i) / j and -(i / j) yield the same result for positive integers because neither returns a value to main—they're essentially discarding it. The first expression just negates i before dividing, but the outcome remains the same.

3.  What is the value of each of the following expressions in C89 or C99? (Give all possible values if an expression may have more than one value.)

(a) 8 / 5

(b) -8/5 

(C) 8 / -5 

(d) -8 / -5

3.

a. 1 or 1.6e

b. -1 or - 1.6e

c. -1 or - 1.6e

d. 1 or 1.6e

4. n/a

5.  What is the value of each of the following expressions in C89 or C99? (Give all possible values if an expression may have more than one value.)

(a) 8 % 5

(b) -8 % 5

(c) 8 % -5

(d) -8 % -5

a. 3

b. -3

c. 3

d. -3

6. n/a

7. The algorithm for computing the UPC check digit ends with the following steps:

Subtract 1 from the total.

Compute the remainder when the adjusted total is divided by 10.

Subtract the remainder from 9.

It's tempting to try to simplify the algorithm by using these steps instead:

Compute the remainder when the total is divided by 10.

Subtract the remainder from 10.

Why doesn't this technique work?

7. 

It incorrectly handles cases where the remainder is 0. The original algorithm adjusts the check digit to be 9 when the remainder is 0, whereas the simplified method would incorrectly compute the check digit as 10.

8.

yes

9.

 Show the output produced by each of the following program fragments. Assume that i. j. and k are int variables.

(a) i = 7; j = 8;

i *= j + 1;

printf("%d %d", i, j);

(b) i = j = k = 1; i += j += k;

printf("%d %d %d", i, j, k);

(c) i = 1; j = 2; k = 3; i -= j -= k;

printf("%d %d %d", i, j, k);

(d) i = 2; j = 1; k = 0; i *= j *= k;

printf("%d %d %d", i, j, k);

9.

a. 63

b. 3

c. 2 -1 3

d. 000

10. Show the output produced by each of the following program fragments. Assume that i and j are int variables.

a. i = 6;
j = i += i;
printf("%d%d",i,j);

a. 1212

b. i =5;
j = (i -=2) +1;
printf("%d%d", i,j);

b. 34

c. i =7;
j = 6 + (i = 2.5);
printf("%d%d", i,j);

c. 28

d. i = 2; j = 8;
j = (i = 6) + (j = 3);
printf("%d%d",i,j);

d. 69

11. Show the output produced by each of the following program fragments. Assume that i. j. and k are int variables.

(a) i = 1;

printf("%d ", i++ - 1); printf("%d", i) ;

(b) i = 10; j = 5; printf("%d ", i++ - ++j) ; printf("%d %d", i, j);

(c) i = 7; j = 8; printf("%d ", i++ - —j); printf("%d %d", i, j);

(d) i = 3; j = 4; k = 5; printf("%d ", i++ - j++ + --k) ; printf("%d %d %d", i, j, k) ;

11.

a. 0 2 //tricky tricky but not tricky enough

b.1. 4 b2. 116

c.1. 0 c2. 87

d.1. 3 d.2. 454

12.  Show the output produced by each of the following program fragments. Assume that i and j are int variables.

(a) i = 5;

j = ++i *3-2; printf("%d %d", i, j);

(b) i = 5;

j = 3 - 2 * i++; printf("%d %d", i, j);

(C) i = 7;

j = 3 * i— + 2; printf("%d %d", i, j);

(d) i = 7;

j = 3 + —i * 2; printf("%d %d", i, j);

12.

a. 6 16

b. 6 -7

c. 6 23

d. 6 20

13.

++i and i += 1 produce the same result, while i++ produces a different result due to the postfix behavior.

14. Supply parentheses to show how a C compiler would interpret each of the following expressions.

(a) a*b-c*d + e

a. (((a*b)-(c*d)) + e)

(b) a / b % c / d

b. (((a / b) % c) / d)

(c) - a - b + c - + d

c. ((-a) - b) + c - (+d)

(d) a * - b / c-d

d. (((a * (-b)) / c)-d)

15. Give the values of i and j after each of the following expression statements has been executed. (Assume that i has the value 1 initially and j has the value 2.)

(a) i += j ;

a.

i = 3
j = 2

(b) i--

b.

i = 0
j =2

(c) i * j / i;

c.

i = 1
j = 2

(d) i % ++j ;

d.

i = 1
j = 3










